{"version":3,"sources":["Node.js","App.js","serviceWorker.js","index.js"],"names":["Node","extraClass","this","props","type","onMouseUp","handleMouseUp","onMouseDown","handleMouseDown","onMouseEnter","handleMouseEnter","className","React","Component","NodeType","small_board","rowSquares","colSquares","vertBoxes","horzBoxes","medium_board","large_board","App","setBoard","board","setState","emptyGrid","length","cornerCount","slice","currentBoard","rows","cols","i","row","j","push","col","state","solving","addPiece","draggingFrom","removePiece","prevLoc","copyGrid","grid","newGrid","forEach","newBoard","sleep","ms","Promise","resolve","setTimeout","getValidMoves","position","moves","nextPos","currentPos","isCorrect","isValid","stop","delay","concat","move","pop","columns","column","key","currnetRow","correctText","id","invalidText","onClick","solve","disabled","style","height","map","rowIndex","value","colIndex","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e7f8958e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Node.css\";\r\n\r\nexport default class Node extends React.Component {\r\n  render() {\r\n    let extraClass = \"\";\r\n    switch (this.props.type) {\r\n      case 0:\r\n        extraClass = \"empty\";\r\n        break;\r\n      case 1:\r\n        extraClass = \"square\";\r\n        break;\r\n      case 2:\r\n        extraClass = \"topNode\";\r\n        break;\r\n      case 3:\r\n        extraClass = \"bottomNode\";\r\n        break;\r\n      case 4:\r\n        extraClass = \"leftNode\";\r\n        break;\r\n      case 5:\r\n        extraClass = \"rightNode\";\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    return (\r\n      <div\r\n        onMouseUp={this.props.handleMouseUp}\r\n        onMouseDown={this.props.handleMouseDown}\r\n        onMouseEnter={this.props.handleMouseEnter}\r\n        className={`Node ${extraClass}`}></div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Node from \"./Node\";\r\nimport \"./App.css\";\r\n\r\nconst NodeType = {\r\n  empty: 0,\r\n  square: 1,\r\n  verticalTop: 2,\r\n  verticalBottom: 3,\r\n  horizontalLeft: 4,\r\n  horizontalRight: 5,\r\n};\r\n\r\nconst small_board = {\r\n  rowSquares: [3, 0, 1, 2],\r\n  colSquares: [3, 0, 0, 0, 1, 1, 1],\r\n  vertBoxes: [0, 1, 1, 1, 0, 0, 1],\r\n  horzBoxes: [1, 2, 2, 2],\r\n};\r\n\r\nconst medium_board = {\r\n  rowSquares: [2, 0, 0, 1, 1, 2],\r\n  colSquares: [1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1],\r\n  vertBoxes: [2, 1, 2, 2, 3, 2, 1, 1, 2, 3, 2, 2],\r\n  horzBoxes: [3, 2, 1, 0, 1, 3],\r\n};\r\n\r\nconst large_board = {\r\n  rowSquares: [3, 2, 0, 0, 0, 1, 1, 0, 3],\r\n  colSquares: [1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 4],\r\n  vertBoxes: [3, 2, 2, 1, 1, 2, 2, 3, 3, 3, 3, 3, 2, 1],\r\n  horzBoxes: [3, 1, 2, 3, 4, 3, 3, 4, 4],\r\n};\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n\r\n    // default board is the small board\r\n    let currentBoard = small_board;\r\n    this.state = {\r\n      board: this.emptyGrid(\r\n        currentBoard.rowSquares.length,\r\n        currentBoard.colSquares.length\r\n      ),\r\n      cornerCount: this.emptyGrid(\r\n        currentBoard.rowSquares.length + 1,\r\n        currentBoard.colSquares.length + 1\r\n      ),\r\n      rowSquares: currentBoard.rowSquares.slice(),\r\n      colSquares: currentBoard.colSquares.slice(),\r\n      vertBoxes: currentBoard.vertBoxes.slice(),\r\n      horzBoxes: currentBoard.horzBoxes.slice(),\r\n\r\n      currentBoard: currentBoard,\r\n      draggingFrom: null,\r\n      solving: false,\r\n      stop: false,\r\n    };\r\n  }\r\n\r\n  // sets the board to a board passed to it. The board is only made up of which pieces\r\n  // are available in the rows and columns.\r\n  // Can also be used to reset the board by passing it the same board being displayed\r\n  setBoard = (board) => {\r\n    this.setState({\r\n      board: this.emptyGrid(board.rowSquares.length, board.colSquares.length),\r\n      cornerCount: this.emptyGrid(\r\n        board.rowSquares.length + 1,\r\n        board.colSquares.length + 1\r\n      ),\r\n      rowSquares: board.rowSquares.slice(),\r\n      colSquares: board.colSquares.slice(),\r\n      vertBoxes: board.vertBoxes.slice(),\r\n      horzBoxes: board.horzBoxes.slice(),\r\n      currentBoard: board,\r\n    });\r\n  };\r\n\r\n  // creates and returns new empty board of given dimensions\r\n  emptyGrid = (rows, cols) => {\r\n    let board = [];\r\n    for (let i = 0; i < rows; i++) {\r\n      let row = [];\r\n      for (let j = 0; j < cols; j++) {\r\n        row.push(NodeType.empty);\r\n      }\r\n      board.push(row);\r\n    }\r\n    return board;\r\n  };\r\n\r\n  // the method a node calls when it's clicked on.\r\n  // adds a square if node is empty. Otherwise removes the piece at that node.\r\n  // also sets the node as the one currently being dragged from for creating horizontal and vertical pieces\r\n  handleMouseDown = (row, col) => {\r\n    const { board, solving } = this.state;\r\n    if (!solving) {\r\n      if (board[row][col] === NodeType.empty) {\r\n        this.addPiece(row, col, NodeType.square);\r\n        this.setState({ draggingFrom: [row, col] });\r\n      } else {\r\n        this.removePiece(row, col);\r\n      }\r\n    }\r\n  };\r\n\r\n  // resets node being dragged from when mouse click is released\r\n  handleMouseUp = () => {\r\n    this.setState({ draggingFrom: null });\r\n  };\r\n\r\n  // if the user is dragging into a valid node, creates a vertical or horizontal piece and\r\n  // removes the square piece that was placed at drag start\r\n  handleMouseEnter = (row, col) => {\r\n    if (!this.state.solving) {\r\n      let prevLoc = this.state.draggingFrom;\r\n      if (\r\n        this.state.draggingFrom &&\r\n        this.state.board[row][col] === NodeType.empty\r\n      ) {\r\n        if (row === prevLoc[0]) {\r\n          if (col === prevLoc[1] - 1) {\r\n            this.removePiece(prevLoc[0], prevLoc[1]);\r\n            this.addPiece(row, col, NodeType.horizontalLeft);\r\n            this.handleMouseUp();\r\n          } else if (col === prevLoc[1] + 1) {\r\n            this.removePiece(prevLoc[0], prevLoc[1]);\r\n            this.addPiece(prevLoc[0], prevLoc[1], NodeType.horizontalLeft);\r\n            this.handleMouseUp();\r\n          }\r\n        } else if (col === prevLoc[1]) {\r\n          if (row === prevLoc[0] - 1) {\r\n            this.removePiece(prevLoc[0], prevLoc[1]);\r\n            this.addPiece(row, col, NodeType.verticalTop);\r\n            this.handleMouseUp();\r\n          } else if (row === prevLoc[0] + 1) {\r\n            this.removePiece(prevLoc[0], prevLoc[1]);\r\n            this.addPiece(prevLoc[0], prevLoc[1], NodeType.verticalTop);\r\n            this.handleMouseUp();\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // returns a copy of a given 2D grid.\r\n  copyGrid = (grid) => {\r\n    let newGrid = [];\r\n    grid.forEach((row) => {\r\n      newGrid.push(row.slice());\r\n    });\r\n    return newGrid;\r\n  };\r\n\r\n  // places a piece of the given type at given position. type must be verticalTop, horizontalLeft or square.\r\n  // updates the available piece count and the corner count at the corners for checking if board is valid\r\n  addPiece = (row, col, type) => {\r\n    const {\r\n      board,\r\n      colSquares,\r\n      rowSquares,\r\n      vertBoxes,\r\n      horzBoxes,\r\n      cornerCount,\r\n    } = this.state;\r\n    let newBoard = this.copyGrid(board);\r\n\r\n    switch (type) {\r\n      case NodeType.square:\r\n        if (colSquares[col] > 0 && rowSquares[row] > 0) {\r\n          newBoard[row][col] = NodeType.square;\r\n          cornerCount[row][col]++;\r\n          cornerCount[row][col + 1]++;\r\n          cornerCount[row + 1][col + 1]++;\r\n          cornerCount[row + 1][col]++;\r\n          colSquares[col]--;\r\n          rowSquares[row]--;\r\n        } else {\r\n          return false;\r\n        }\r\n        break;\r\n      case NodeType.horizontalLeft:\r\n        if (horzBoxes[row] > 0) {\r\n          newBoard[row][col] = NodeType.horizontalLeft;\r\n          newBoard[row][col + 1] = NodeType.horizontalRight;\r\n          cornerCount[row][col]++;\r\n          cornerCount[row][col + 2]++;\r\n          cornerCount[row + 1][col + 2]++;\r\n          cornerCount[row + 1][col]++;\r\n          horzBoxes[row]--;\r\n        } else {\r\n          return false;\r\n        }\r\n        break;\r\n      case NodeType.verticalTop:\r\n        if (vertBoxes[col] > 0) {\r\n          newBoard[row][col] = NodeType.verticalTop;\r\n          newBoard[row + 1][col] = NodeType.verticalBottom;\r\n          cornerCount[row][col]++;\r\n          cornerCount[row][col + 1]++;\r\n          cornerCount[row + 2][col + 1]++;\r\n          cornerCount[row + 2][col]++;\r\n          vertBoxes[col]--;\r\n        } else {\r\n          return false;\r\n        }\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n    this.setState({\r\n      board: newBoard,\r\n    });\r\n    return true;\r\n  };\r\n\r\n  // remove the piece at a given position. This may effect other positions when removing longer pieces.\r\n  // updates the available piece count and the corner count at the corners for checking if board is valid\r\n  removePiece = (row, col) => {\r\n    const {\r\n      board,\r\n      colSquares,\r\n      rowSquares,\r\n      vertBoxes,\r\n      horzBoxes,\r\n      cornerCount,\r\n    } = this.state;\r\n    let newBoard = this.copyGrid(board);\r\n\r\n    switch (newBoard[row][col]) {\r\n      case NodeType.horizontalLeft:\r\n        newBoard[row][col + 1] = NodeType.empty;\r\n        cornerCount[row][col]--;\r\n        cornerCount[row][col + 2]--;\r\n        cornerCount[row + 1][col + 2]--;\r\n        cornerCount[row + 1][col]--;\r\n        horzBoxes[row]++;\r\n        break;\r\n      case NodeType.horizontalRight:\r\n        newBoard[row][col - 1] = NodeType.empty;\r\n        cornerCount[row][col - 1]--;\r\n        cornerCount[row][col + 1]--;\r\n        cornerCount[row + 1][col + 1]--;\r\n        cornerCount[row + 1][col - 1]--;\r\n        horzBoxes[row]++;\r\n        break;\r\n      case NodeType.verticalTop:\r\n        newBoard[row + 1][col] = NodeType.empty;\r\n        cornerCount[row][col]--;\r\n        cornerCount[row][col + 1]--;\r\n        cornerCount[row + 2][col + 1]--;\r\n        cornerCount[row + 2][col]--;\r\n        vertBoxes[col]++;\r\n        break;\r\n      case NodeType.verticalBottom:\r\n        newBoard[row - 1][col] = NodeType.empty;\r\n        cornerCount[row - 1][col]--;\r\n        cornerCount[row - 1][col + 1]--;\r\n        cornerCount[row + 1][col + 1]--;\r\n        cornerCount[row + 1][col]--;\r\n        vertBoxes[col]++;\r\n        break;\r\n      case NodeType.square:\r\n        cornerCount[row][col]--;\r\n        cornerCount[row][col + 1]--;\r\n        cornerCount[row + 1][col + 1]--;\r\n        cornerCount[row + 1][col]--;\r\n        colSquares[col]++;\r\n        rowSquares[row]++;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    newBoard[row][col] = NodeType.empty;\r\n    this.setState({\r\n      board: newBoard,\r\n    });\r\n  };\r\n\r\n  // starts solving from the top left of the board using a backtracking apprach.\r\n  async solve(delay) {\r\n    // sets solving to be true which disables user input\r\n    this.setState({ solving: true });\r\n    //resets the board, discarding any changes the user made to it.\r\n    this.setBoard(this.state.currentBoard);\r\n    await this.sleep(40);\r\n\r\n    // start at position 0, 0 and add valid moves to the stack\r\n    let moves = [];\r\n    let position = { row: 0, col: 0 };\r\n    moves = moves.concat(this.getValidMoves(position));\r\n    let move;\r\n\r\n    // as long as there are available moves continue.\r\n    while (moves.length > 0) {\r\n      // stop solving if the user has set solving to be false.\r\n      if (this.state.stop) {\r\n        this.setState({ stop: false, solving: false });\r\n        return;\r\n      }\r\n\r\n      // pop the next move of the move stack.\r\n      move = moves.pop();\r\n\r\n      // if the move is supposed to be at the current position we can make that move\r\n      if (move.row === position.row && move.col === position.col) {\r\n        this.addPiece(move.row, move.col, move.type);\r\n        // pause to make algorithm visual\r\n        await this.sleep(delay);\r\n\r\n        // if the board is valid after the move has been made, push the move back on\r\n        // the stack, update the position to the next available one, check if we have reached the end of the\r\n        // board which would tell us that we have found a solution and we break out. If we're not at the end,\r\n        // get all valid moves at that position and push them to the move stack\r\n        if (this.isValid()) {\r\n          moves.push(move);\r\n          position = this.nextPos(position);\r\n          if (position.col >= this.state.board[0].length) {\r\n            break;\r\n          } else moves = moves.concat(this.getValidMoves(position));\r\n        } else {\r\n          // is the board is not valid after adding the piece, we remove it again.\r\n          this.removePiece(move.row, move.col);\r\n          await this.sleep(delay);\r\n        }\r\n      } else {\r\n        // if the move position is not the current position, we know that we have tried all moves at our\r\n        // current position so we undo the move from the stack and set our position to where that move was made.\r\n        this.removePiece(move.row, move.col);\r\n        await this.sleep(delay);\r\n        position = { row: move.row, col: move.col };\r\n      }\r\n    }\r\n    // after solving is finished we change the state to enable user input again\r\n    this.setState({ solving: false });\r\n  }\r\n\r\n  // function that waits a set amount of milliseconds used for visualizing the algorithm\r\n  sleep = (ms) => {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  };\r\n\r\n  // given a position on the board, checks the available pieces and if they would fit then returns a\r\n  // list of all the available moves at that position as an object in the form\r\n  // {row, col, pieceType}\r\n  getValidMoves = (position) => {\r\n    const { rowSquares, colSquares, vertBoxes, horzBoxes, board } = this.state;\r\n    let moves = [];\r\n\r\n    if (horzBoxes[position.row] > 0 && board[0].length > position.col + 1) {\r\n      moves.push({\r\n        row: position.row,\r\n        col: position.col,\r\n        type: NodeType.horizontalLeft,\r\n      });\r\n    }\r\n\r\n    if (\r\n      vertBoxes[position.col] > 0 &&\r\n      board.length > position.row + 1 &&\r\n      board[position.row + 1][position.col] === NodeType.empty\r\n    ) {\r\n      moves.push({\r\n        row: position.row,\r\n        col: position.col,\r\n        type: NodeType.verticalTop,\r\n      });\r\n    }\r\n    if (rowSquares[position.row] > 0 && colSquares[position.col] > 0) {\r\n      moves.push({\r\n        row: position.row,\r\n        col: position.col,\r\n        type: NodeType.square,\r\n      });\r\n    }\r\n    return moves;\r\n  };\r\n\r\n  // given a position on the board, goes down the columns and then along the rows until it finds an empty\r\n  // node or reaches the end and returns that position\r\n  nextPos = (currentPos) => {\r\n    const board = this.state.board;\r\n    do {\r\n      if (currentPos.row === board.length - 1) {\r\n        currentPos.col++;\r\n      }\r\n      // currentPos.col += Math.floor(currentPos.row + 1 / board.length);\r\n      currentPos.row = (currentPos.row + 1) % board.length;\r\n      // console.log(currentPos);\r\n    } while (\r\n      currentPos.col < board[0].length &&\r\n      board[currentPos.row][currentPos.col] !== NodeType.empty\r\n    );\r\n    return currentPos;\r\n  };\r\n\r\n  // checks if the board is correct\r\n  // it's sufficient to check that we have exactly zero of each piece type available\r\n  isCorrect = () => {\r\n    const { rowSquares, colSquares, vertBoxes, horzBoxes } = this.state;\r\n    for (let i = 0; i < rowSquares.length; i++) {\r\n      if (rowSquares[i] !== 0) return false;\r\n    }\r\n    for (let i = 0; i < colSquares.length; i++) {\r\n      if (colSquares[i] !== 0) return false;\r\n    }\r\n    for (let i = 0; i < vertBoxes.length; i++) {\r\n      if (vertBoxes[i] !== 0) return false;\r\n    }\r\n    for (let i = 0; i < horzBoxes.length; i++) {\r\n      if (horzBoxes[i] !== 0) return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  // checks if there are 3 or more pieces at any corner in which case the board becomes invalid\r\n  isValid = () => {\r\n    const cornerCount = this.state.cornerCount;\r\n    for (let row = 0; row < cornerCount.length; row++) {\r\n      for (let col = 0; col < cornerCount[0].length; col++) {\r\n        if (cornerCount[row][col] >= 3) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      board,\r\n      rowSquares,\r\n      colSquares,\r\n      vertBoxes,\r\n      horzBoxes,\r\n      solving,\r\n    } = this.state;\r\n    let columns = [];\r\n    if (this.state.colSquares) {\r\n      for (let col = 0; col < colSquares.length; col++) {\r\n        let column = [];\r\n        for (let i = 0; i < vertBoxes[col]; i++) {\r\n          column.push(<div className=\"tallBox\" key={2 * i}></div>);\r\n        }\r\n        for (let i = 0; i < colSquares[col]; i++) {\r\n          column.push(<div className=\"box\" key={2 * i + 1}></div>);\r\n        }\r\n        columns.push(column);\r\n      }\r\n    }\r\n\r\n    let rows = [];\r\n    if (this.state.rowSquares) {\r\n      for (let row = 0; row < rowSquares.length; row++) {\r\n        let currnetRow = [];\r\n        for (let i = 0; i < horzBoxes[row]; i++) {\r\n          currnetRow.push(<div className=\"longBox\" key={2 * i}></div>);\r\n        }\r\n        for (let i = 0; i < rowSquares[row]; i++) {\r\n          currnetRow.push(<div className=\"box\" key={2 * i + 1}></div>);\r\n        }\r\n        rows.push(currnetRow);\r\n      }\r\n    }\r\n    let correctText = <h2 id=\"correct\">Correct!</h2>;\r\n    let invalidText = <h2 id=\"invalid\">Invalid! too many corners touching</h2>;\r\n\r\n    return (\r\n      <div className=\"contents\">\r\n        <div className=\"Menu\">\r\n          <div className=\"control\">\r\n            <button\r\n              onClick={() => {\r\n                if (solving) {\r\n                  this.setState({ stop: true });\r\n                } else {\r\n                  this.solve(20);\r\n                }\r\n              }}>\r\n              {solving ? \"Stop\" : \"Solve\"}\r\n            </button>\r\n            <button\r\n              disabled={solving}\r\n              onClick={() => {\r\n                this.setState(this.setBoard(this.state.currentBoard));\r\n              }}>\r\n              Reset Board\r\n            </button>\r\n          </div>\r\n          <div className=\"board-select\">\r\n            Select board\r\n            <button\r\n              disabled={solving}\r\n              onClick={() => this.setBoard(small_board)}>\r\n              Small\r\n            </button>\r\n            <button\r\n              disabled={solving}\r\n              onClick={() => this.setBoard(medium_board)}>\r\n              Medium\r\n            </button>\r\n            <button\r\n              disabled={solving}\r\n              onClick={() => this.setBoard(large_board)}>\r\n              Large\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"message\">\r\n            {solving\r\n              ? \"\"\r\n              : this.isCorrect()\r\n              ? correctText\r\n              : this.isValid()\r\n              ? \"\"\r\n              : invalidText}\r\n          </div>\r\n        </div>\r\n        <div style={{ height: board.length * 2 * 50 + \"px\" }} className=\"Board\">\r\n          {board.map((row, rowIndex) => {\r\n            return (\r\n              <div className=\"Row\" key={rowIndex}>\r\n                {row.map((value, colIndex) => {\r\n                  return (\r\n                    <Node\r\n                      handleMouseUp={this.handleMouseUp}\r\n                      handleMouseDown={() => {\r\n                        this.handleMouseDown(rowIndex, colIndex);\r\n                      }}\r\n                      handleMouseEnter={() => {\r\n                        this.handleMouseEnter(rowIndex, colIndex);\r\n                      }}\r\n                      type={value}\r\n                      key={colIndex}></Node>\r\n                  );\r\n                })}\r\n                <div className=\"AvailableRow\">{rows[rowIndex]}</div>\r\n              </div>\r\n            );\r\n          })}\r\n          <div className=\"verticalItems\">\r\n            {this.state.board[0].map((col, colIndex) => {\r\n              return (\r\n                <div className=\"AvailableCol\" key={colIndex}>\r\n                  {columns[colIndex]}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n        <div className=\"Instructions\">\r\n          <h1>Instructions</h1>\r\n          <p>\r\n            Tomoku is a puzzle game where the goal is to place all available\r\n            pieces shown along the edges, into the grid. The pieces need to be\r\n            placed into the grid in such a way that there are never 4 corners\r\n            meeting at a single point\r\n          </p>\r\n          <img\r\n            src=\"./images/invalid.png\"\r\n            alt=\"example of 4 corners touching\"></img>\r\n          <p>\r\n            The above is an example of an invalid arrangement since there are 4\r\n            corners touching at the point circled in red\r\n          </p>\r\n          <p>\r\n            You can only place pieces onto the board at locations where there\r\n            are pieces available. The available pieces are listed along the\r\n            sides and are unique to that row/column. The below image shows the\r\n            available pieces for the first row. As you can see, it must contain\r\n            a single horizontal box and three square. The rest of the empty\r\n            spaces will then need to be filled with vertical boxes since they\r\n            are not displayed here. If i placed a horizontal box in row 1, I\r\n            would not be able to place another one in that row since we see that\r\n            there is only one available\r\n          </p>\r\n          <img src=\"./images/available.jpg\" alt=\"first row\"></img>\r\n          <p>\r\n            Horizontal and vertical boxes can be placed anywhere within their\r\n            rows or columns respectively. However, squares are counted in both\r\n            the row and the column, so in order to place a square at a given\r\n            position, there must be one available in both the given row and the\r\n            column.\r\n          </p>\r\n          <h3>Controls</h3>\r\n          <p>\r\n            To place a square, simply click on a valid position on the board.\r\n            <br></br>To place a horizontal or vertical box, click where you want\r\n            the box to start and drag onto the other point of the box while\r\n            holding down the mouse. A box will only be placed if there is one\r\n            available for that location.\r\n          </p>\r\n          <img\r\n            height=\"100x\"\r\n            src=\"./images/horizontal.gif\"\r\n            alt=\"animation showing how to place box\"></img>\r\n          <p>To remove a box, simply click on it again.</p>\r\n          <img\r\n            height=\"100x\"\r\n            src=\"./images/remove.gif\"\r\n            alt=\"animation showing how to remove box\"></img>\r\n          <p>\r\n            Different boards can be selected at the top. But be careful since\r\n            progress on your current board will not be saved.<br></br>\r\n            You can also press solve and the computer will start solving the\r\n            board visually using backtracking.\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}